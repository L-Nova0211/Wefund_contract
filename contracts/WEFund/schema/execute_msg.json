{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "ExecuteMsg",
  "oneOf": [
    {
      "type": "object",
      "required": [
        "set_config"
      ],
      "properties": {
        "set_config": {
          "type": "object",
          "properties": {
            "admin": {
              "type": [
                "string",
                "null"
              ]
            },
            "anchor_market": {
              "type": [
                "string",
                "null"
              ]
            },
            "aust_token": {
              "type": [
                "string",
                "null"
              ]
            },
            "fundraising_contract": {
              "type": [
                "string",
                "null"
              ]
            },
            "vesting_contract": {
              "type": [
                "string",
                "null"
              ]
            },
            "wefund": {
              "type": [
                "string",
                "null"
              ]
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "add_project"
      ],
      "properties": {
        "add_project": {
          "type": "object",
          "required": [
            "creator_wallet",
            "project_collected",
            "project_company",
            "project_createddate",
            "project_description",
            "project_ecosystem",
            "project_email",
            "project_logo",
            "project_milestones",
            "project_saft",
            "project_teammembers",
            "project_title",
            "project_website",
            "project_whitepaper",
            "token_addr",
            "vesting"
          ],
          "properties": {
            "creator_wallet": {
              "type": "string"
            },
            "project_collected": {
              "$ref": "#/definitions/Uint128"
            },
            "project_company": {
              "type": "string"
            },
            "project_createddate": {
              "type": "string"
            },
            "project_description": {
              "type": "string"
            },
            "project_ecosystem": {
              "type": "string"
            },
            "project_email": {
              "type": "string"
            },
            "project_logo": {
              "type": "string"
            },
            "project_milestones": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Milestone"
              }
            },
            "project_saft": {
              "type": "string"
            },
            "project_teammembers": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TeamMember"
              }
            },
            "project_title": {
              "type": "string"
            },
            "project_website": {
              "type": "string"
            },
            "project_whitepaper": {
              "type": "string"
            },
            "token_addr": {
              "type": "string"
            },
            "vesting": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/VestingParameter"
              }
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "remove_project"
      ],
      "properties": {
        "remove_project": {
          "type": "object",
          "required": [
            "project_id"
          ],
          "properties": {
            "project_id": {
              "$ref": "#/definitions/Uint128"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "back2_project"
      ],
      "properties": {
        "back2_project": {
          "type": "object",
          "required": [
            "backer_wallet",
            "fundraising_stage",
            "otherchain",
            "otherchain_wallet",
            "project_id",
            "token_amount"
          ],
          "properties": {
            "backer_wallet": {
              "type": "string"
            },
            "fundraising_stage": {
              "type": "string"
            },
            "otherchain": {
              "type": "string"
            },
            "otherchain_wallet": {
              "type": "string"
            },
            "project_id": {
              "$ref": "#/definitions/Uint128"
            },
            "token_amount": {
              "$ref": "#/definitions/Uint128"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "complete_project"
      ],
      "properties": {
        "complete_project": {
          "type": "object",
          "required": [
            "project_id"
          ],
          "properties": {
            "project_id": {
              "$ref": "#/definitions/Uint128"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "fail_project"
      ],
      "properties": {
        "fail_project": {
          "type": "object",
          "required": [
            "project_id"
          ],
          "properties": {
            "project_id": {
              "$ref": "#/definitions/Uint128"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "transfer_all_coins"
      ],
      "properties": {
        "transfer_all_coins": {
          "type": "object",
          "required": [
            "wallet"
          ],
          "properties": {
            "wallet": {
              "type": "string"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "add_communitymember"
      ],
      "properties": {
        "add_communitymember": {
          "type": "object",
          "required": [
            "wallet"
          ],
          "properties": {
            "wallet": {
              "type": "string"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "remove_communitymember"
      ],
      "properties": {
        "remove_communitymember": {
          "type": "object",
          "required": [
            "wallet"
          ],
          "properties": {
            "wallet": {
              "type": "string"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "wefund_approve"
      ],
      "properties": {
        "wefund_approve": {
          "type": "object",
          "required": [
            "deadline",
            "project_id"
          ],
          "properties": {
            "deadline": {
              "$ref": "#/definitions/Uint128"
            },
            "project_id": {
              "$ref": "#/definitions/Uint128"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "set_community_vote"
      ],
      "properties": {
        "set_community_vote": {
          "type": "object",
          "required": [
            "project_id",
            "voted",
            "wallet"
          ],
          "properties": {
            "project_id": {
              "$ref": "#/definitions/Uint128"
            },
            "voted": {
              "type": "boolean"
            },
            "wallet": {
              "type": "string"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "set_fundraising_stage"
      ],
      "properties": {
        "set_fundraising_stage": {
          "type": "object",
          "required": [
            "project_id",
            "stage"
          ],
          "properties": {
            "project_id": {
              "$ref": "#/definitions/Uint128"
            },
            "stage": {
              "type": "string"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "set_milestone_vote"
      ],
      "properties": {
        "set_milestone_vote": {
          "type": "object",
          "required": [
            "project_id",
            "voted",
            "wallet"
          ],
          "properties": {
            "project_id": {
              "$ref": "#/definitions/Uint128"
            },
            "voted": {
              "type": "boolean"
            },
            "wallet": {
              "type": "string"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "release_milestone"
      ],
      "properties": {
        "release_milestone": {
          "type": "object",
          "required": [
            "project_id"
          ],
          "properties": {
            "project_id": {
              "$ref": "#/definitions/Uint128"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "set_project_status"
      ],
      "properties": {
        "set_project_status": {
          "type": "object",
          "required": [
            "project_id",
            "status"
          ],
          "properties": {
            "project_id": {
              "$ref": "#/definitions/Uint128"
            },
            "status": {
              "$ref": "#/definitions/Uint128"
            }
          }
        }
      },
      "additionalProperties": false
    }
  ],
  "definitions": {
    "Addr": {
      "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
      "type": "string"
    },
    "Milestone": {
      "type": "object",
      "required": [
        "milestone_amount",
        "milestone_description",
        "milestone_enddate",
        "milestone_name",
        "milestone_startdate",
        "milestone_status",
        "milestone_step",
        "milestone_votes"
      ],
      "properties": {
        "milestone_amount": {
          "$ref": "#/definitions/Uint128"
        },
        "milestone_description": {
          "type": "string"
        },
        "milestone_enddate": {
          "type": "string"
        },
        "milestone_name": {
          "type": "string"
        },
        "milestone_startdate": {
          "type": "string"
        },
        "milestone_status": {
          "$ref": "#/definitions/Uint128"
        },
        "milestone_step": {
          "$ref": "#/definitions/Uint128"
        },
        "milestone_votes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Vote"
          }
        }
      }
    },
    "TeamMember": {
      "type": "object",
      "required": [
        "teammember_description",
        "teammember_linkedin",
        "teammember_role"
      ],
      "properties": {
        "teammember_description": {
          "type": "string"
        },
        "teammember_linkedin": {
          "type": "string"
        },
        "teammember_role": {
          "type": "string"
        }
      }
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    },
    "VestingParameter": {
      "type": "object",
      "required": [
        "stage",
        "stage_after",
        "stage_amount",
        "stage_period",
        "stage_price",
        "stage_soon"
      ],
      "properties": {
        "stage": {
          "type": "string"
        },
        "stage_after": {
          "$ref": "#/definitions/Uint128"
        },
        "stage_amount": {
          "$ref": "#/definitions/Uint128"
        },
        "stage_period": {
          "$ref": "#/definitions/Uint128"
        },
        "stage_price": {
          "$ref": "#/definitions/Uint128"
        },
        "stage_soon": {
          "$ref": "#/definitions/Uint128"
        }
      }
    },
    "Vote": {
      "type": "object",
      "required": [
        "voted",
        "wallet"
      ],
      "properties": {
        "voted": {
          "type": "boolean"
        },
        "wallet": {
          "$ref": "#/definitions/Addr"
        }
      }
    }
  }
}
